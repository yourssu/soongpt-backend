name: Docker - Build, Push to ECR and Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        working-directory: ./

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Clean Build with Gradle (with Testing)
        run: |
          ./gradlew clean build

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yourssu/${{ vars.PROJECT_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2
        env:
          YOURSSU_PEM: ${{ secrets.YOURSSU_PEM }}
          HOST_URL: ${{ vars.HOST_URL }}
          
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          CORS_ALLOWED_ORIGIN: ${{ vars.CORS_ALLOWED_ORIGIN }}
          
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          
          SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL }}
          SLACK_LOG_CHANNEL: ${{ vars.SLACK_LOG_CHANNEL }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yourssu/${{ vars.PROJECT_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $HOST_URL >> ~/.ssh/known_hosts
          echo "$YOURSSU_PEM" > yourssu.pem
          chmod 600 yourssu.pem
          
          # Create environment file
          echo "SERVER_PORT=$SERVER_PORT" >> .env
          echo "CORS_ALLOWED_ORIGIN=$CORS_ALLOWED_ORIGIN" >> .env
          
          echo "DB_URL=$DB_URL" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          
          echo "PROJECT_NAME=$PROJECT_NAME" >> .env
          echo "ENVIRONMENT=$ENVIRONMENT" >> .env
          
          echo "SLACK_CHANNEL=$SLACK_CHANNEL" >> .env
          echo "SLACK_LOG_CHANNEL=$SLACK_LOG_CHANNEL" >> .env
          echo "SLACK_TOKEN=$SLACK_TOKEN" >> .env
          
          # Create deployment directory structure
          ssh -i yourssu.pem ubuntu@$HOST_URL "mkdir -p /home/ubuntu/$PROJECT_NAME-api/logs"
          
          # Deploy environment file to host machine
          scp -i yourssu.pem .env ubuntu@$HOST_URL:/home/ubuntu/$PROJECT_NAME-api/
          
          # Create deployment script on EC2
          ssh -i yourssu.pem ubuntu@$HOST_URL "cat > /home/ubuntu/$PROJECT_NAME-api/docker-deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo 'Installing Docker...'
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \"\$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            sudo usermod -aG docker ubuntu
            newgrp docker
          fi
          
          # Install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            echo 'Installing AWS CLI...'
            curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf awscliv2.zip aws/
          fi
          
          # Configure AWS credentials
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION=$AWS_REGION
          
          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          # Stop and remove existing container if exists
          docker stop $PROJECT_NAME-container 2>/dev/null || true
          docker rm $PROJECT_NAME-container 2>/dev/null || true
          
          # Pull the latest image
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Run the container with environment variables
          docker run -d \\
            --name $PROJECT_NAME-container \\
            --restart unless-stopped \\
            -p $SERVER_PORT:$SERVER_PORT \\
            -v /home/ubuntu/$PROJECT_NAME-api/logs:/app/logs \\
            --env-file /home/ubuntu/$PROJECT_NAME-api/.env \\
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Clean up old images
          docker image prune -f
          
          echo 'Deployment completed successfully!'
          EOF"
          
          # Make the script executable
          ssh -i yourssu.pem ubuntu@$HOST_URL "chmod +x /home/ubuntu/$PROJECT_NAME-api/docker-deploy.sh"
          
          # Execute the deployment script with environment variables
          ssh -i yourssu.pem ubuntu@$HOST_URL "cd /home/ubuntu/$PROJECT_NAME-api && \
            AWS_ACCESS_KEY_ID='$AWS_ACCESS_KEY_ID' \
            AWS_SECRET_ACCESS_KEY='$AWS_SECRET_ACCESS_KEY' \
            AWS_REGION='$AWS_REGION' \
            ECR_REGISTRY='$ECR_REGISTRY' \
            ECR_REPOSITORY='$ECR_REPOSITORY' \
            IMAGE_TAG='$IMAGE_TAG' \
            PROJECT_NAME='$PROJECT_NAME' \
            SERVER_PORT='$SERVER_PORT' \
            ./docker-deploy.sh"