#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Generate Target SQL Insert Script from target_map.json
This script reads target_map.json and generates SQL INSERT statements for TargetEntity.
courseId is determined by joining with CourseEntity based on the course code.
"""

import json
import os
import re
from typing import Dict, List, Set, Optional

def load_target_map() -> Dict:
    """Load target mapping from target_map.json file."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    target_map_file = os.path.join(script_dir, "result", "target_map", "target_map.json")
    
    if not os.path.exists(target_map_file):
        raise FileNotFoundError(f"Target map file not found: {target_map_file}")
    
    with open(target_map_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def load_course_data() -> List[Dict]:
    """Load parsed course data from JSON file generated by course_parser.py."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    course_file = os.path.join(script_dir, "result", "course_parser", "2025_2학기_parsed.json")
    
    if not os.path.exists(course_file):
        raise FileNotFoundError(f"Course data file not found: {course_file}")
    
    with open(course_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def parse_department_grade(target_str: str) -> List[tuple]:
    """
    Parse department+grade string to extract department name and grade.
    
    Args:
        target_str: String like "컴퓨터학부1", "전체1", "스포츠학부2"
        
    Returns:
        List of (department_name, grade) tuples
    """
    results = []
    
    # Handle special cases
    if target_str.startswith("전체"):
        # Extract grade from "전체1", "전체2", etc.
        grade_match = re.search(r'전체(\d+)', target_str)
        if grade_match:
            grade = int(grade_match.group(1))
            # "전체" means all departments, but we'll mark it as null for now
            # This will need to be handled differently in the actual database
            results.append((None, grade))
    else:
        # Extract department and grade from strings like "컴퓨터학부1", "스포츠학부2"
        match = re.search(r'^(.+?)(\d+)$', target_str)
        if match:
            department = match.group(1)
            grade = int(match.group(2))
            results.append((department, grade))
    
    return results

def parse_target_value(target_value: str) -> List[str]:
    """
    Parse target value string to extract individual department+grade combinations.
    
    Args:
        target_value: String like "컴퓨터학부1,소프트웨어학부1,AI융합학부1" or "전체1,전체2,전체3,전체4,전체5"
        
    Returns:
        List of individual target strings
    """
    if not target_value or target_value.strip() == "":
        return []
    
    # Split by comma and clean up
    targets = [target.strip() for target in target_value.split(',')]
    return [target for target in targets if target]

def generate_target_inserts(target_map: Dict, course_data: List[Dict]) -> List[str]:
    """
    Generate SQL INSERT statements for TargetEntity from target_map.
    
    This function:
    1. Takes the original target field from course_data (from course_parser.py output)
    2. Maps it to the new target value using target_map.json
    3. Generates SQL INSERT statements for the target table
    
    Args:
        target_map: Target mapping dictionary from target_map.json
        course_data: Parsed course data with code and target fields from course_parser.py
        
    Returns:
        List of SQL INSERT statements
    """
    insert_statements = []
    
    # Header comment
    insert_statements.append("-- SQL INSERT statements for TargetEntity")
    insert_statements.append("-- Generated from target_map.json mapping")
    insert_statements.append("-- Maps original course target values to department+grade combinations")
    insert_statements.append("")
    
    # Process each course from the parsed data
    for course in course_data:
        original_target = course.get("target", "")
        code = course.get("code")
        category = course.get("category", "")
        
        if not original_target or not code:
            continue
            
        # Skip if category is MAJOR_ELECTIVE or MAJOR_REQUIRED and original target contains "전체"
        if category in ["MAJOR_ELECTIVE", "MAJOR_REQUIRED", "GENERAL_REQUIRED"] and "전체" in original_target:
            continue
            
        # Look up the mapped target value in target_map
        mapped_target_value = target_map.get(original_target, "")
        if not mapped_target_value:
            # If no mapping found, skip this course
            continue
            
        # Parse the mapped target value to get individual department+grade combinations
        individual_targets = parse_target_value(mapped_target_value)
        if not individual_targets:
            continue
            
        for target in individual_targets:
            department_grades = parse_department_grade(target)
            
            for department_name, grade in department_grades:
                if department_name is None:
                    # Handle "전체" case - this means all departments for the given grade
                    # Generate entries for all departments by joining with department table
                    sql = f"""INSERT INTO target (department_id, course_id, grade) 
SELECT d.id, c.id, {grade}
FROM course c, department d
WHERE c.code = {code};"""
                    insert_statements.append(sql)
                    insert_statements.append("")
                else:
                    # Handle specific department - join with department table by name
                    sql = f"""INSERT INTO target (department_id, course_id, grade) 
SELECT d.id, c.id, {grade}
FROM course c, department d
WHERE c.code = {code} AND d.name = '{department_name}';"""
                    insert_statements.append(sql)
                    insert_statements.append("")
    
    return insert_statements

def main():
    """Main function to generate target SQL insert script from target_map.json."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Create output directory
    output_dir = os.path.join(script_dir, "result", "generate_sql_insert")
    os.makedirs(output_dir, exist_ok=True)
    
    # Load data
    print("Loading target map data...")
    target_map = load_target_map()
    
    print("Loading course data...")
    course_data = load_course_data()
    
    print("Generating SQL INSERT statements...")
    insert_statements = generate_target_inserts(target_map, course_data)
    
    # Write SQL file
    output_file = os.path.join(output_dir, "target_insert_from_map.sql")
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(insert_statements))
    
    print(f"SQL INSERT statements generated: {output_file}")
    print(f"Total statements: {len([s for s in insert_statements if s.startswith('INSERT')])}")

if __name__ == "__main__":
    main()